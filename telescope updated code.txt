import time
import network
import urequests
import json
from machine import Pin, PWM  # Import GPIO and PWM for servo
from time import sleep

# Define Stepper Motor Pins (using DRV8825)
STEP_HOR = Pin(18, Pin.OUT)  # Stepper 1 (Horizontal) STEP pin
DIR_HOR = Pin(5, Pin.OUT)    # Stepper 1 (Horizontal) DIR pin
STEP_VER = Pin(17, Pin.OUT)  # Stepper 2 (Vertical) STEP pin
DIR_VER = Pin(16, Pin.OUT)   # Stepper 2 (Vertical) DIR pin

# Define Servo Motor (for focus control) - Now on GPIO 0
servo = PWM(Pin(0), freq=50)  # Servo on GPIO 0, 50Hz PWM

# Initialize slider value to 0
slider_value = 0
last_slider_value = None  # To store the last slider value
motor_data = {}

# Function to move stepper motors
def move_stepper(step_pin, dir_pin, direction, steps):
    dir_pin.value(direction)  # Set direction (1 for one way, 0 for the other)
    for _ in range(steps):
        step_pin.on()
        time.sleep_us(500)  # Step pulse duration (500us)
        step_pin.off()
        time.sleep_us(500)  # Small delay between pulses

# Function to control servo position (focus control)
def move_servo(angle):
    duty = int((angle / 180) * 102 + 25)  # Convert angle (0-180) to duty cycle
    servo.duty(duty)
    print(f"Servo set to {angle} degrees")
    time.sleep(1)  # Allow servo to move

# Function to handle motor control from Firebase (Only motor-related actions)
def handle_motor_control(data):
    global motor_data
    if data:
        motor_data = data.get('motor', {})  # Get motor-related data
        
        if motor_data:  # Only proceed if motor-related data exists
            print("Received motor data from Firebase:")
            for key, value in motor_data.items():
                motor_action = value.get('motor', None)

                if motor_action == 'left':
                    print("Moving Horizontal Left")
                    move_stepper(STEP_HOR, DIR_HOR, 0, 100)  # Move left
                elif motor_action == 'right':
                    print("Moving Horizontal Right")
                    move_stepper(STEP_HOR, DIR_HOR, 1, 100)  # Move right
                elif motor_action == 'up':
                    print("Moving Vertical Up")
                    move_stepper(STEP_VER, DIR_VER, 1, 100)  # Move up
                elif motor_action == 'down':
                    print("Moving Vertical Down")
                    move_stepper(STEP_VER, DIR_VER, 0, 100)  # Move down
                else:
                    print(f"Invalid motor action: {motor_action}")

# Function to handle slider control (for focus adjustment)
def handle_slider_control(data):
    global slider_value, last_slider_value
    if isinstance(data, dict):  # Check if data is a dictionary
        slider_data = data.get('slider', {})  # Get slider-related data
        
        if slider_data:  # Only proceed if slider-related data exists
            for key, value in slider_data.items():
                slider_value = value  # Get the slider value from the dictionary
                
                try:
                    slider_value = float(slider_value)  # Ensure it's a float
                    print(f"Received slider value: {slider_value}")
                    
                    # Only adjust focus when slider value changes
                    if slider_value != last_slider_value:
                        print(f"Slider value changed, adjusting focus to: {slider_value}")
                        move_servo(slider_value)  # Move the servo to the new focus position
                        last_slider_value = slider_value  # Update the last slider value
                    else:
                        print("Slider value hasn't changed, no action taken.")
                
                except ValueError:
                    print("Invalid slider value received.")
        else:
            print("No slider data received.")

# Fetch data from Firebase
def fetch_data_from_firebase():
    try:
        firebase_url = "https://smart-telescope-default-rtdb.firebaseio.com/.json"
        response = urequests.get(firebase_url)
        data = response.json()  
        print("Data fetched from Firebase")
        
        if 'motor' in data:  # Only pass motor data to motor control handler
            handle_motor_control(data)  # Handle motor control actions
        if 'slider' in data:  # Only pass slider data to slider control handler
            handle_slider_control(data)  # Handle slider control actions
        
    except Exception as e:
        print(f"Error fetching data from Firebase: {e}")

# Connect to Wi-Fi
def connect_wifi():
    ssid = 'Kenz'
    password = 'Kichu@04'

    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid, password)

    while not wlan.isconnected():
        time.sleep(1)
    print(f"Connected to Wi-Fi! IP: {wlan.ifconfig()[0]}")

# Main loop
def main():
    connect_wifi()  
    while True:
        fetch_data_from_firebase()  # Fetch data and handle motor/slider control
        time.sleep(5)  # Delay to prevent excessive fetching

main()

